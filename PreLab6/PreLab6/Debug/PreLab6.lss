
PreLab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000975  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000394  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART>:
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
		while (!(UCSR0A & (1<<UDRE0)) );
		UDR0 = Texto[i];
	}
}
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1
  a6:	80 81       	ld	r24, Z
  a8:	88 69       	ori	r24, 0x98	; 152
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	08 95       	ret

000000c4 <WriteUART>:
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <WriteUART>
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d0:	08 95       	ret

000000d2 <setup>:

void setup(void){
	DDRB = 0x3F;
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x03;
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	87 b9       	out	0x07, r24	; 7
	initUART();
  da:	0e 94 48 00 	call	0x90	; 0x90 <initUART>
  de:	08 95       	ret

000000e0 <UART_msj>:
}

void UART_msj(){
	WriteUART('\n');
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('C');
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('A');
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('R');
  f2:	82 e5       	ldi	r24, 0x52	; 82
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('A');
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('C');
  fe:	83 e4       	ldi	r24, 0x43	; 67
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('T');
 104:	84 e5       	ldi	r24, 0x54	; 84
 106:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('E');
 10a:	85 e4       	ldi	r24, 0x45	; 69
 10c:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('R');
 110:	82 e5       	ldi	r24, 0x52	; 82
 112:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART(' ');
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('A');
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART(' ');
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('M');
 128:	8d e4       	ldi	r24, 0x4D	; 77
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('O');
 12e:	8f e4       	ldi	r24, 0x4F	; 79
 130:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('S');
 134:	83 e5       	ldi	r24, 0x53	; 83
 136:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('T');
 13a:	84 e5       	ldi	r24, 0x54	; 84
 13c:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('R');
 140:	82 e5       	ldi	r24, 0x52	; 82
 142:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('A');
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('R');
 14c:	82 e5       	ldi	r24, 0x52	; 82
 14e:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART('\n');
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART(10);
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
	WriteUART(13);
 15e:	8d e0       	ldi	r24, 0x0D	; 13
 160:	0e 94 62 00 	call	0xc4	; 0xc4 <WriteUART>
 164:	08 95       	ret

00000166 <main>:
	*/
}

int main(void)
{
    setup();
 166:	0e 94 69 00 	call	0xd2	; 0xd2 <setup>
	sei();
 16a:	78 94       	sei
	UART_msj();
 16c:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_msj>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xa>

00000172 <OutLEDS>:
		
    }
}

void OutLEDS(void){
	PORTB = (PORTB & 0xC0) | (bufferTX & 0x3F);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	9f 73       	andi	r25, 0x3F	; 63
 17a:	80 7c       	andi	r24, 0xC0	; 192
 17c:	89 2b       	or	r24, r25
 17e:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & 0xFC) | ((bufferTX >> 6) & 0x03);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	92 95       	swap	r25
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	93 70       	andi	r25, 0x03	; 3
 18e:	8c 7f       	andi	r24, 0xFC	; 252
 190:	89 2b       	or	r24, r25
 192:	88 b9       	out	0x08, r24	; 8
 194:	08 95       	ret

00000196 <__vector_18>:
}

ISR(USART_RX_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	bufferTX = UDR0;
 1b8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1bc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	while (!(UCSR0A & (1<<UDRE0)));
 1c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c4:	85 ff       	sbrs	r24, 5
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <__vector_18+0x2a>
	UDR0 = bufferTX;
 1c8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	OutLEDS();
 1cc:	0e 94 b9 00 	call	0x172	; 0x172 <OutLEDS>
	UART_msj();
 1d0:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_msj>
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
