
PreLab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000b40  00000bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080016c  0080016c  00000c40  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d89  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ba  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c4  00000000  00000000  000032de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000036a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 37       	cpi	r26, 0x75	; 117
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  9e:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
#include "Functions.h"
#include <avr/io.h>
#include <stdint.h>

void initADC(uint8_t just, uint8_t canal, uint8_t prescale){
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	// Vref = 5V
	ADMUX |= (1<<REFS0);
  ac:	90 81       	ld	r25, Z
  ae:	90 64       	ori	r25, 0x40	; 64
  b0:	90 83       	st	Z, r25
	ADMUX &= ~(1<<REFS1);
  b2:	90 81       	ld	r25, Z
  b4:	9f 77       	andi	r25, 0x7F	; 127
  b6:	90 83       	st	Z, r25
	
	ADCSRA = 0;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN); //Enciende ADC
  be:	90 81       	ld	r25, Z
  c0:	90 68       	ori	r25, 0x80	; 128
  c2:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADIE); //Int ADC
  c4:	90 81       	ld	r25, Z
  c6:	98 60       	ori	r25, 0x08	; 8
  c8:	90 83       	st	Z, r25
	
	//Justificación 1(Izq), 0(Der)
	if(just == 1){
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	31 f4       	brne	.+12     	; 0xda <initADC+0x34>
		ADMUX |= (1 << ADLAR);
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 83       	st	Z, r24
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <initADC+0x3e>
	}
	else{
		ADMUX &= ~(1 << ADLAR);
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	80 83       	st	Z, r24
	}
	
	//Prescaler (cases)
	switch (prescale){
  e4:	40 31       	cpi	r20, 0x10	; 16
  e6:	41 f1       	breq	.+80     	; 0x138 <initADC+0x92>
  e8:	40 f4       	brcc	.+16     	; 0xfa <initADC+0x54>
  ea:	44 30       	cpi	r20, 0x04	; 4
  ec:	99 f0       	breq	.+38     	; 0x114 <initADC+0x6e>
  ee:	48 30       	cpi	r20, 0x08	; 8
  f0:	d1 f0       	breq	.+52     	; 0x126 <initADC+0x80>
  f2:	42 30       	cpi	r20, 0x02	; 2
  f4:	09 f0       	breq	.+2      	; 0xf8 <initADC+0x52>
  f6:	41 c0       	rjmp	.+130    	; 0x17a <initADC+0xd4>
  f8:	07 c0       	rjmp	.+14     	; 0x108 <initADC+0x62>
  fa:	40 34       	cpi	r20, 0x40	; 64
  fc:	79 f1       	breq	.+94     	; 0x15c <initADC+0xb6>
  fe:	40 38       	cpi	r20, 0x80	; 128
 100:	b1 f1       	breq	.+108    	; 0x16e <initADC+0xc8>
 102:	40 32       	cpi	r20, 0x20	; 32
 104:	d1 f5       	brne	.+116    	; 0x17a <initADC+0xd4>
 106:	21 c0       	rjmp	.+66     	; 0x14a <initADC+0xa4>
		case 2:
			ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 7f       	andi	r24, 0xF8	; 248
 110:	80 83       	st	Z, r24
			break;
 112:	38 c0       	rjmp	.+112    	; 0x184 <initADC+0xde>
		case 4:
			ADCSRA |= (1 << ADPS1);
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
			ADCSRA &= ~((1 << ADPS0) | (1 << ADPS2));
 11e:	80 81       	ld	r24, Z
 120:	8a 7f       	andi	r24, 0xFA	; 250
 122:	80 83       	st	Z, r24
			break;
 124:	2f c0       	rjmp	.+94     	; 0x184 <initADC+0xde>
		case 8:
			ADCSRA |= (1 << ADPS0 ) | (1 << ADPS1);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	80 83       	st	Z, r24
			ADCSRA &= ~(1 << ADPS2);
 130:	80 81       	ld	r24, Z
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	80 83       	st	Z, r24
			break;
 136:	26 c0       	rjmp	.+76     	; 0x184 <initADC+0xde>
		case 16:
			ADCSRA |= (1 << ADPS2);
 138:	ea e7       	ldi	r30, 0x7A	; 122
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	80 83       	st	Z, r24
			ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1));
 142:	80 81       	ld	r24, Z
 144:	8c 7f       	andi	r24, 0xFC	; 252
 146:	80 83       	st	Z, r24
			break;
 148:	1d c0       	rjmp	.+58     	; 0x184 <initADC+0xde>
		case 32:
			ADCSRA |= (1 << ADPS0 ) | (1 << ADPS2);
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	85 60       	ori	r24, 0x05	; 5
 152:	80 83       	st	Z, r24
			ADCSRA &= ~(1 << ADPS1);
 154:	80 81       	ld	r24, Z
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 83       	st	Z, r24
			break;
 15a:	14 c0       	rjmp	.+40     	; 0x184 <initADC+0xde>
		case 64:
			ADCSRA |= (1 << ADPS1) | (1 << ADPS2);
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	86 60       	ori	r24, 0x06	; 6
 164:	80 83       	st	Z, r24
			ADCSRA &= ~(1 << ADPS0);
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24
			break;
 16c:	0b c0       	rjmp	.+22     	; 0x184 <initADC+0xde>
		case 128:
			ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	87 60       	ori	r24, 0x07	; 7
 176:	80 83       	st	Z, r24
			break;
 178:	05 c0       	rjmp	.+10     	; 0x184 <initADC+0xde>
		default:
			ADCSRA &= ~((1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2));
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 7f       	andi	r24, 0xF8	; 248
 182:	80 83       	st	Z, r24
	}
	
	if (canal < 6){
 184:	66 30       	cpi	r22, 0x06	; 6
 186:	b8 f5       	brcc	.+110    	; 0x1f6 <initADC+0x150>
		switch(canal){
 188:	62 30       	cpi	r22, 0x02	; 2
 18a:	c1 f0       	breq	.+48     	; 0x1bc <initADC+0x116>
 18c:	28 f4       	brcc	.+10     	; 0x198 <initADC+0xf2>
 18e:	66 23       	and	r22, r22
 190:	49 f0       	breq	.+18     	; 0x1a4 <initADC+0xfe>
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	69 f0       	breq	.+26     	; 0x1b0 <initADC+0x10a>
 196:	2a c0       	rjmp	.+84     	; 0x1ec <initADC+0x146>
 198:	64 30       	cpi	r22, 0x04	; 4
 19a:	e1 f0       	breq	.+56     	; 0x1d4 <initADC+0x12e>
 19c:	a8 f0       	brcs	.+42     	; 0x1c8 <initADC+0x122>
 19e:	65 30       	cpi	r22, 0x05	; 5
 1a0:	f9 f0       	breq	.+62     	; 0x1e0 <initADC+0x13a>
 1a2:	24 c0       	rjmp	.+72     	; 0x1ec <initADC+0x146>
			case 0:
				DIDR0 |= (1<<ADC0D);
 1a4:	ee e7       	ldi	r30, 0x7E	; 126
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	80 83       	st	Z, r24
			break;
 1ae:	08 95       	ret
			case 1:
				DIDR0 |= (1<<ADC1D);
 1b0:	ee e7       	ldi	r30, 0x7E	; 126
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	80 83       	st	Z, r24
			break;
 1ba:	08 95       	ret
			case 2:
				DIDR0 |= (1<<ADC2D);
 1bc:	ee e7       	ldi	r30, 0x7E	; 126
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	80 83       	st	Z, r24
			break;
 1c6:	08 95       	ret
			case 3:
				DIDR0 |= (1<<ADC3D);
 1c8:	ee e7       	ldi	r30, 0x7E	; 126
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 83       	st	Z, r24
			break;
 1d2:	08 95       	ret
			case 4:
				DIDR0 |= (1<<ADC4D);
 1d4:	ee e7       	ldi	r30, 0x7E	; 126
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	80 83       	st	Z, r24
			break;
 1de:	08 95       	ret
			case 5:
				DIDR0 |= (1<<ADC5D);
 1e0:	ee e7       	ldi	r30, 0x7E	; 126
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 83       	st	Z, r24
			break;
 1ea:	08 95       	ret
			default: DIDR0 &= ~(1<<ADC0D);
 1ec:	ee e7       	ldi	r30, 0x7E	; 126
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <readADC>:
		}
	}
}

uint16_t readADC(uint16_t canal){
	ADMUX = (ADMUX & 0xF0) | canal;
 1f8:	ec e7       	ldi	r30, 0x7C	; 124
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	90 81       	ld	r25, Z
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	89 2b       	or	r24, r25
 202:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 204:	ea e7       	ldi	r30, 0x7A	; 122
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 20e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 212:	86 fd       	sbrc	r24, 6
 214:	fc cf       	rjmp	.-8      	; 0x20e <readADC+0x16>
		return ADC;
 216:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 21a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 21e:	08 95       	ret

00000220 <initUART>:
void OutLEDS();
void Menu();

void initUART(void){
	//rx y tx como entrada y salida
	DDRD &= ~(1<<DDD0);
 220:	8a b1       	in	r24, 0x0a	; 10
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
 22c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0;
 230:	e1 ec       	ldi	r30, 0xC1	; 193
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
 236:	80 81       	ld	r24, Z
 238:	88 69       	ori	r24, 0x98	; 152
 23a:	80 83       	st	Z, r24
	
	UCSR0C = 0;
 23c:	e2 ec       	ldi	r30, 0xC2	; 194
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	10 82       	st	Z, r1
	//asincrono, sin paridad, 1 stop, 8 caract
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	80 83       	st	Z, r24
	//valor baud y velocidad(9600)
	UBRR0 = 103;
 246:	87 e6       	ldi	r24, 0x67	; 103
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 24e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 252:	08 95       	ret

00000254 <WriteUART>:
}

void WriteUART(char Caracter){
	while (!(UCSR0A & (1<<UDRE0)));
 254:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 258:	95 ff       	sbrs	r25, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <WriteUART>
	UDR0 = Caracter;
 25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 260:	08 95       	ret

00000262 <TextUART>:
}

void TextUART(char * Texto){
 262:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	07 c0       	rjmp	.+14     	; 0x276 <TextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)) );
 268:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 26c:	95 ff       	sbrs	r25, 5
 26e:	fc cf       	rjmp	.-8      	; 0x268 <TextUART+0x6>
		UDR0 = Texto[i];
 270:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = Caracter;
}

void TextUART(char * Texto){
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	fa 01       	movw	r30, r20
 278:	e2 0f       	add	r30, r18
 27a:	f1 1d       	adc	r31, r1
 27c:	30 81       	ld	r19, Z
 27e:	31 11       	cpse	r19, r1
 280:	f3 cf       	rjmp	.-26     	; 0x268 <TextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)) );
		UDR0 = Texto[i];
	}
}
 282:	08 95       	ret

00000284 <setup>:

void setup(void){
	DDRB = 0x3F;
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x03;
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	87 b9       	out	0x07, r24	; 7
	initUART();
 28c:	0e 94 10 01 	call	0x220	; 0x220 <initUART>
 290:	08 95       	ret

00000292 <UART_msj>:
}

void UART_msj(){
	WriteUART('\n');
 292:	8a e0       	ldi	r24, 0x0A	; 10
 294:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	WriteUART('R');
	WriteUART('\n');
	WriteUART(10);
	WriteUART(13);*/
	
	TextUART("Caracter a mostrar");
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 31 01 	call	0x262	; 0x262 <TextUART>
	WriteUART(10);
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	WriteUART(13);
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
 2ac:	08 95       	ret

000002ae <Menu>:
	
}

void Menu(){
	WriteUART(10);
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	WriteUART(13);
 2b4:	8d e0       	ldi	r24, 0x0D	; 13
 2b6:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	TextUART("1. Leer valor potenciometro");
 2ba:	83 e1       	ldi	r24, 0x13	; 19
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 31 01 	call	0x262	; 0x262 <TextUART>
	WriteUART(10);
 2c2:	8a e0       	ldi	r24, 0x0A	; 10
 2c4:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	WriteUART(13);
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	TextUART("2. Enviar ASCII");
 2ce:	8f e2       	ldi	r24, 0x2F	; 47
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 31 01 	call	0x262	; 0x262 <TextUART>
	WriteUART(10);
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
	WriteUART(13);
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
 2e2:	08 95       	ret

000002e4 <main>:
}

int main(void)
{
    setup();
 2e4:	0e 94 42 01 	call	0x284	; 0x284 <setup>
	initADC(1,6,128);
 2e8:	40 e8       	ldi	r20, 0x80	; 128
 2ea:	66 e0       	ldi	r22, 0x06	; 6
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
 2f2:	78 94       	sei
	Menu();
 2f4:	0e 94 57 01 	call	0x2ae	; 0x2ae <Menu>
    while (1) 
    {
		readADC(6);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <readADC>
 300:	fb cf       	rjmp	.-10     	; 0x2f8 <main+0x14>

00000302 <OutLEDS>:
    }
}

void OutLEDS(void){
	PORTB = (PORTB & 0xC0) | (bufferTX & 0x3F);
 302:	85 b1       	in	r24, 0x05	; 5
 304:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <bufferTX>
 308:	9f 73       	andi	r25, 0x3F	; 63
 30a:	80 7c       	andi	r24, 0xC0	; 192
 30c:	89 2b       	or	r24, r25
 30e:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & 0xFC) | ((bufferTX >> 6) & 0x03);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <bufferTX>
 316:	92 95       	swap	r25
 318:	96 95       	lsr	r25
 31a:	96 95       	lsr	r25
 31c:	93 70       	andi	r25, 0x03	; 3
 31e:	8c 7f       	andi	r24, 0xFC	; 252
 320:	89 2b       	or	r24, r25
 322:	88 b9       	out	0x08, r24	; 8
 324:	08 95       	ret

00000326 <__vector_18>:
}

ISR(USART_RX_vect){
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	6e 97       	sbiw	r28, 0x1e	; 30
 356:	de bf       	out	0x3e, r29	; 62
 358:	cd bf       	out	0x3d, r28	; 61
	bufferTX = UDR0;
 35a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 35e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <bufferTX>
	while (!(UCSR0A & (1<<UDRE0)));
 362:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 366:	85 ff       	sbrs	r24, 5
 368:	fc cf       	rjmp	.-8      	; 0x362 <__vector_18+0x3c>
	UDR0 = bufferTX;
 36a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if (mostrar == true)
 36e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 372:	88 23       	and	r24, r24
 374:	69 f0       	breq	.+26     	; 0x390 <__vector_18+0x6a>
	{
		OutLEDS();
 376:	0e 94 81 01 	call	0x302	; 0x302 <OutLEDS>
		mostrar = false;
 37a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
		WriteUART(10);
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
		WriteUART(13);
 384:	8d e0       	ldi	r24, 0x0D	; 13
 386:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
		Menu();
 38a:	0e 94 57 01 	call	0x2ae	; 0x2ae <Menu>
 38e:	90 c0       	rjmp	.+288    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
	} 
	else
	{
		if (bufferTX == 49)
 390:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bufferTX>
 394:	81 33       	cpi	r24, 0x31	; 49
 396:	09 f0       	breq	.+2      	; 0x39a <__vector_18+0x74>
 398:	69 c0       	rjmp	.+210    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			WriteUART(10);
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			WriteUART(13);
 3a0:	8d e0       	ldi	r24, 0x0D	; 13
 3a2:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			readADC(6);
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <readADC>
			PORTB = ValorADC;
 3ae:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ValorADC>
 3b2:	85 b9       	out	0x05, r24	; 5
			PORTC = (ValorADC >> 6);
 3b4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ValorADC>
 3b8:	82 95       	swap	r24
 3ba:	86 95       	lsr	r24
 3bc:	86 95       	lsr	r24
 3be:	83 70       	andi	r24, 0x03	; 3
 3c0:	88 b9       	out	0x08, r24	; 8
			centenas = ValorADC/100;
 3c2:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <ValorADC>
 3c6:	29 e2       	ldi	r18, 0x29	; 41
 3c8:	32 9f       	mul	r19, r18
 3ca:	21 2d       	mov	r18, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	22 95       	swap	r18
 3d0:	2f 70       	andi	r18, 0x0F	; 15
 3d2:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <centenas>
			decenas = (ValorADC - (centenas*100))/10;
 3d6:	83 2f       	mov	r24, r19
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	44 e6       	ldi	r20, 0x64	; 100
 3dc:	24 9f       	mul	r18, r20
 3de:	80 19       	sub	r24, r0
 3e0:	91 09       	sbc	r25, r1
 3e2:	11 24       	eor	r1, r1
 3e4:	6a e0       	ldi	r22, 0x0A	; 10
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	0e 94 8c 02 	call	0x518	; 0x518 <__divmodhi4>
 3ec:	60 93 71 01 	sts	0x0171, r22	; 0x800171 <decenas>
			unidades = ValorADC - (centenas*100 + decenas*10);
 3f0:	96 2f       	mov	r25, r22
 3f2:	99 0f       	add	r25, r25
 3f4:	89 2f       	mov	r24, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	88 0f       	add	r24, r24
 3fa:	89 0f       	add	r24, r25
 3fc:	94 e6       	ldi	r25, 0x64	; 100
 3fe:	29 9f       	mul	r18, r25
 400:	80 0d       	add	r24, r0
 402:	11 24       	eor	r1, r1
 404:	38 1b       	sub	r19, r24
 406:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <unidades>
			mosCen = centenas + 48;
 40a:	20 5d       	subi	r18, 0xD0	; 208
 40c:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <mosCen>
			mosDec = decenas + 48;
 410:	60 5d       	subi	r22, 0xD0	; 208
 412:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <mosDec>
			mosUni = unidades + 48;
 416:	30 5d       	subi	r19, 0xD0	; 208
 418:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <mosUni>
			
			WriteUART(10);
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			WriteUART(13);
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			char mensaje[30];
			sprintf(mensaje, "Valor Potenciometro: %c%c%c\r\n", mosCen, mosDec, mosUni);
 428:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <mosUni>
 42c:	1f 92       	push	r1
 42e:	8f 93       	push	r24
 430:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <mosDec>
 434:	1f 92       	push	r1
 436:	8f 93       	push	r24
 438:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <mosCen>
 43c:	1f 92       	push	r1
 43e:	8f 93       	push	r24
 440:	8f e3       	ldi	r24, 0x3F	; 63
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	8e 01       	movw	r16, r28
 44a:	0f 5f       	subi	r16, 0xFF	; 255
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
 44e:	1f 93       	push	r17
 450:	0f 93       	push	r16
 452:	0e 94 b4 02 	call	0x568	; 0x568 <sprintf>
			TextUART(mensaje);
 456:	c8 01       	movw	r24, r16
 458:	0e 94 31 01 	call	0x262	; 0x262 <TextUART>
			
			/*WriteUART(mosCen);
			WriteUART(mosDec);
			WriteUART(mosUni);*/
			Menu();
 45c:	0e 94 57 01 	call	0x2ae	; 0x2ae <Menu>
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	22 c0       	rjmp	.+68     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		}
		else if (bufferTX == 50)
 46c:	82 33       	cpi	r24, 0x32	; 50
 46e:	71 f4       	brne	.+28     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		{
			mostrar = false;
 470:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
			WriteUART(10);
 474:	8a e0       	ldi	r24, 0x0A	; 10
 476:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			WriteUART(13);
 47a:	8d e0       	ldi	r24, 0x0D	; 13
 47c:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			UART_msj();
 480:	0e 94 49 01 	call	0x292	; 0x292 <UART_msj>
			//OutLEDS();
			mostrar = true;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
 48a:	12 c0       	rjmp	.+36     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
			//Menu();
		} 
		else
		{
			WriteUART(10);
 48c:	8a e0       	ldi	r24, 0x0A	; 10
 48e:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			WriteUART(13);
 492:	8d e0       	ldi	r24, 0x0D	; 13
 494:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			TextUART("Input invalido");
 498:	8d e5       	ldi	r24, 0x5D	; 93
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 31 01 	call	0x262	; 0x262 <TextUART>
			Menu();
 4a0:	0e 94 57 01 	call	0x2ae	; 0x2ae <Menu>
			WriteUART(10);
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
			WriteUART(13);
 4aa:	8d e0       	ldi	r24, 0x0D	; 13
 4ac:	0e 94 2a 01 	call	0x254	; 0x254 <WriteUART>
		}
	}
	/*OutLEDS();
	UART_msj();*/
}
 4b0:	6e 96       	adiw	r28, 0x1e	; 30
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_21>:

ISR(ADC_vect){
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	8f 93       	push	r24
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	ValorADC =  ADCH;
 4f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4fa:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <ValorADC>
	ADCSRA |= (1<<ADIF);
 4fe:	ea e7       	ldi	r30, 0x7A	; 122
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 61       	ori	r24, 0x10	; 16
 506:	80 83       	st	Z, r24
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__divmodhi4>:
 518:	97 fb       	bst	r25, 7
 51a:	07 2e       	mov	r0, r23
 51c:	16 f4       	brtc	.+4      	; 0x522 <__divmodhi4+0xa>
 51e:	00 94       	com	r0
 520:	07 d0       	rcall	.+14     	; 0x530 <__divmodhi4_neg1>
 522:	77 fd       	sbrc	r23, 7
 524:	09 d0       	rcall	.+18     	; 0x538 <__divmodhi4_neg2>
 526:	0e 94 a0 02 	call	0x540	; 0x540 <__udivmodhi4>
 52a:	07 fc       	sbrc	r0, 7
 52c:	05 d0       	rcall	.+10     	; 0x538 <__divmodhi4_neg2>
 52e:	3e f4       	brtc	.+14     	; 0x53e <__divmodhi4_exit>

00000530 <__divmodhi4_neg1>:
 530:	90 95       	com	r25
 532:	81 95       	neg	r24
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	08 95       	ret

00000538 <__divmodhi4_neg2>:
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255

0000053e <__divmodhi4_exit>:
 53e:	08 95       	ret

00000540 <__udivmodhi4>:
 540:	aa 1b       	sub	r26, r26
 542:	bb 1b       	sub	r27, r27
 544:	51 e1       	ldi	r21, 0x11	; 17
 546:	07 c0       	rjmp	.+14     	; 0x556 <__udivmodhi4_ep>

00000548 <__udivmodhi4_loop>:
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	a6 17       	cp	r26, r22
 54e:	b7 07       	cpc	r27, r23
 550:	10 f0       	brcs	.+4      	; 0x556 <__udivmodhi4_ep>
 552:	a6 1b       	sub	r26, r22
 554:	b7 0b       	sbc	r27, r23

00000556 <__udivmodhi4_ep>:
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	5a 95       	dec	r21
 55c:	a9 f7       	brne	.-22     	; 0x548 <__udivmodhi4_loop>
 55e:	80 95       	com	r24
 560:	90 95       	com	r25
 562:	bc 01       	movw	r22, r24
 564:	cd 01       	movw	r24, r26
 566:	08 95       	ret

00000568 <sprintf>:
 568:	ae e0       	ldi	r26, 0x0E	; 14
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ea eb       	ldi	r30, 0xBA	; 186
 56e:	f2 e0       	ldi	r31, 0x02	; 2
 570:	0c 94 75 05 	jmp	0xaea	; 0xaea <__prologue_saves__+0x1c>
 574:	0d 89       	ldd	r16, Y+21	; 0x15
 576:	1e 89       	ldd	r17, Y+22	; 0x16
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	8c 83       	std	Y+4, r24	; 0x04
 57c:	1a 83       	std	Y+2, r17	; 0x02
 57e:	09 83       	std	Y+1, r16	; 0x01
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	9f e7       	ldi	r25, 0x7F	; 127
 584:	9e 83       	std	Y+6, r25	; 0x06
 586:	8d 83       	std	Y+5, r24	; 0x05
 588:	ae 01       	movw	r20, r28
 58a:	47 5e       	subi	r20, 0xE7	; 231
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	6f 89       	ldd	r22, Y+23	; 0x17
 590:	78 8d       	ldd	r23, Y+24	; 0x18
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	0e 94 d6 02 	call	0x5ac	; 0x5ac <vfprintf>
 59a:	ef 81       	ldd	r30, Y+7	; 0x07
 59c:	f8 85       	ldd	r31, Y+8	; 0x08
 59e:	e0 0f       	add	r30, r16
 5a0:	f1 1f       	adc	r31, r17
 5a2:	10 82       	st	Z, r1
 5a4:	2e 96       	adiw	r28, 0x0e	; 14
 5a6:	e4 e0       	ldi	r30, 0x04	; 4
 5a8:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__epilogue_restores__+0x1c>

000005ac <vfprintf>:
 5ac:	ab e0       	ldi	r26, 0x0B	; 11
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	ec ed       	ldi	r30, 0xDC	; 220
 5b2:	f2 e0       	ldi	r31, 0x02	; 2
 5b4:	0c 94 67 05 	jmp	0xace	; 0xace <__prologue_saves__>
 5b8:	6c 01       	movw	r12, r24
 5ba:	7b 01       	movw	r14, r22
 5bc:	8a 01       	movw	r16, r20
 5be:	fc 01       	movw	r30, r24
 5c0:	17 82       	std	Z+7, r1	; 0x07
 5c2:	16 82       	std	Z+6, r1	; 0x06
 5c4:	83 81       	ldd	r24, Z+3	; 0x03
 5c6:	81 ff       	sbrs	r24, 1
 5c8:	cc c1       	rjmp	.+920    	; 0x962 <__stack+0x63>
 5ca:	ce 01       	movw	r24, r28
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	3c 01       	movw	r6, r24
 5d0:	f6 01       	movw	r30, r12
 5d2:	93 81       	ldd	r25, Z+3	; 0x03
 5d4:	f7 01       	movw	r30, r14
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	7f 01       	movw	r14, r30
 5e0:	88 23       	and	r24, r24
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <vfprintf+0x3a>
 5e4:	ba c1       	rjmp	.+884    	; 0x95a <__stack+0x5b>
 5e6:	85 32       	cpi	r24, 0x25	; 37
 5e8:	39 f4       	brne	.+14     	; 0x5f8 <vfprintf+0x4c>
 5ea:	93 fd       	sbrc	r25, 3
 5ec:	85 91       	lpm	r24, Z+
 5ee:	93 ff       	sbrs	r25, 3
 5f0:	81 91       	ld	r24, Z+
 5f2:	7f 01       	movw	r14, r30
 5f4:	85 32       	cpi	r24, 0x25	; 37
 5f6:	29 f4       	brne	.+10     	; 0x602 <vfprintf+0x56>
 5f8:	b6 01       	movw	r22, r12
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 600:	e7 cf       	rjmp	.-50     	; 0x5d0 <vfprintf+0x24>
 602:	91 2c       	mov	r9, r1
 604:	21 2c       	mov	r2, r1
 606:	31 2c       	mov	r3, r1
 608:	ff e1       	ldi	r31, 0x1F	; 31
 60a:	f3 15       	cp	r31, r3
 60c:	d8 f0       	brcs	.+54     	; 0x644 <vfprintf+0x98>
 60e:	8b 32       	cpi	r24, 0x2B	; 43
 610:	79 f0       	breq	.+30     	; 0x630 <vfprintf+0x84>
 612:	38 f4       	brcc	.+14     	; 0x622 <vfprintf+0x76>
 614:	80 32       	cpi	r24, 0x20	; 32
 616:	79 f0       	breq	.+30     	; 0x636 <vfprintf+0x8a>
 618:	83 32       	cpi	r24, 0x23	; 35
 61a:	a1 f4       	brne	.+40     	; 0x644 <vfprintf+0x98>
 61c:	23 2d       	mov	r18, r3
 61e:	20 61       	ori	r18, 0x10	; 16
 620:	1d c0       	rjmp	.+58     	; 0x65c <vfprintf+0xb0>
 622:	8d 32       	cpi	r24, 0x2D	; 45
 624:	61 f0       	breq	.+24     	; 0x63e <vfprintf+0x92>
 626:	80 33       	cpi	r24, 0x30	; 48
 628:	69 f4       	brne	.+26     	; 0x644 <vfprintf+0x98>
 62a:	23 2d       	mov	r18, r3
 62c:	21 60       	ori	r18, 0x01	; 1
 62e:	16 c0       	rjmp	.+44     	; 0x65c <vfprintf+0xb0>
 630:	83 2d       	mov	r24, r3
 632:	82 60       	ori	r24, 0x02	; 2
 634:	38 2e       	mov	r3, r24
 636:	e3 2d       	mov	r30, r3
 638:	e4 60       	ori	r30, 0x04	; 4
 63a:	3e 2e       	mov	r3, r30
 63c:	2a c0       	rjmp	.+84     	; 0x692 <vfprintf+0xe6>
 63e:	f3 2d       	mov	r31, r3
 640:	f8 60       	ori	r31, 0x08	; 8
 642:	1d c0       	rjmp	.+58     	; 0x67e <vfprintf+0xd2>
 644:	37 fc       	sbrc	r3, 7
 646:	2d c0       	rjmp	.+90     	; 0x6a2 <vfprintf+0xf6>
 648:	20 ed       	ldi	r18, 0xD0	; 208
 64a:	28 0f       	add	r18, r24
 64c:	2a 30       	cpi	r18, 0x0A	; 10
 64e:	40 f0       	brcs	.+16     	; 0x660 <vfprintf+0xb4>
 650:	8e 32       	cpi	r24, 0x2E	; 46
 652:	b9 f4       	brne	.+46     	; 0x682 <vfprintf+0xd6>
 654:	36 fc       	sbrc	r3, 6
 656:	81 c1       	rjmp	.+770    	; 0x95a <__stack+0x5b>
 658:	23 2d       	mov	r18, r3
 65a:	20 64       	ori	r18, 0x40	; 64
 65c:	32 2e       	mov	r3, r18
 65e:	19 c0       	rjmp	.+50     	; 0x692 <vfprintf+0xe6>
 660:	36 fe       	sbrs	r3, 6
 662:	06 c0       	rjmp	.+12     	; 0x670 <vfprintf+0xc4>
 664:	8a e0       	ldi	r24, 0x0A	; 10
 666:	98 9e       	mul	r9, r24
 668:	20 0d       	add	r18, r0
 66a:	11 24       	eor	r1, r1
 66c:	92 2e       	mov	r9, r18
 66e:	11 c0       	rjmp	.+34     	; 0x692 <vfprintf+0xe6>
 670:	ea e0       	ldi	r30, 0x0A	; 10
 672:	2e 9e       	mul	r2, r30
 674:	20 0d       	add	r18, r0
 676:	11 24       	eor	r1, r1
 678:	22 2e       	mov	r2, r18
 67a:	f3 2d       	mov	r31, r3
 67c:	f0 62       	ori	r31, 0x20	; 32
 67e:	3f 2e       	mov	r3, r31
 680:	08 c0       	rjmp	.+16     	; 0x692 <vfprintf+0xe6>
 682:	8c 36       	cpi	r24, 0x6C	; 108
 684:	21 f4       	brne	.+8      	; 0x68e <vfprintf+0xe2>
 686:	83 2d       	mov	r24, r3
 688:	80 68       	ori	r24, 0x80	; 128
 68a:	38 2e       	mov	r3, r24
 68c:	02 c0       	rjmp	.+4      	; 0x692 <vfprintf+0xe6>
 68e:	88 36       	cpi	r24, 0x68	; 104
 690:	41 f4       	brne	.+16     	; 0x6a2 <vfprintf+0xf6>
 692:	f7 01       	movw	r30, r14
 694:	93 fd       	sbrc	r25, 3
 696:	85 91       	lpm	r24, Z+
 698:	93 ff       	sbrs	r25, 3
 69a:	81 91       	ld	r24, Z+
 69c:	7f 01       	movw	r14, r30
 69e:	81 11       	cpse	r24, r1
 6a0:	b3 cf       	rjmp	.-154    	; 0x608 <vfprintf+0x5c>
 6a2:	98 2f       	mov	r25, r24
 6a4:	9f 7d       	andi	r25, 0xDF	; 223
 6a6:	95 54       	subi	r25, 0x45	; 69
 6a8:	93 30       	cpi	r25, 0x03	; 3
 6aa:	28 f4       	brcc	.+10     	; 0x6b6 <vfprintf+0x10a>
 6ac:	0c 5f       	subi	r16, 0xFC	; 252
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	9f e3       	ldi	r25, 0x3F	; 63
 6b2:	99 83       	std	Y+1, r25	; 0x01
 6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <vfprintf+0x124>
 6b6:	83 36       	cpi	r24, 0x63	; 99
 6b8:	31 f0       	breq	.+12     	; 0x6c6 <vfprintf+0x11a>
 6ba:	83 37       	cpi	r24, 0x73	; 115
 6bc:	71 f0       	breq	.+28     	; 0x6da <vfprintf+0x12e>
 6be:	83 35       	cpi	r24, 0x53	; 83
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <vfprintf+0x118>
 6c2:	59 c0       	rjmp	.+178    	; 0x776 <vfprintf+0x1ca>
 6c4:	21 c0       	rjmp	.+66     	; 0x708 <vfprintf+0x15c>
 6c6:	f8 01       	movw	r30, r16
 6c8:	80 81       	ld	r24, Z
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	0e 5f       	subi	r16, 0xFE	; 254
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	88 24       	eor	r8, r8
 6d2:	83 94       	inc	r8
 6d4:	91 2c       	mov	r9, r1
 6d6:	53 01       	movw	r10, r6
 6d8:	13 c0       	rjmp	.+38     	; 0x700 <vfprintf+0x154>
 6da:	28 01       	movw	r4, r16
 6dc:	f2 e0       	ldi	r31, 0x02	; 2
 6de:	4f 0e       	add	r4, r31
 6e0:	51 1c       	adc	r5, r1
 6e2:	f8 01       	movw	r30, r16
 6e4:	a0 80       	ld	r10, Z
 6e6:	b1 80       	ldd	r11, Z+1	; 0x01
 6e8:	36 fe       	sbrs	r3, 6
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <vfprintf+0x146>
 6ec:	69 2d       	mov	r22, r9
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x14a>
 6f2:	6f ef       	ldi	r22, 0xFF	; 255
 6f4:	7f ef       	ldi	r23, 0xFF	; 255
 6f6:	c5 01       	movw	r24, r10
 6f8:	0e 94 c2 04 	call	0x984	; 0x984 <strnlen>
 6fc:	4c 01       	movw	r8, r24
 6fe:	82 01       	movw	r16, r4
 700:	f3 2d       	mov	r31, r3
 702:	ff 77       	andi	r31, 0x7F	; 127
 704:	3f 2e       	mov	r3, r31
 706:	16 c0       	rjmp	.+44     	; 0x734 <vfprintf+0x188>
 708:	28 01       	movw	r4, r16
 70a:	22 e0       	ldi	r18, 0x02	; 2
 70c:	42 0e       	add	r4, r18
 70e:	51 1c       	adc	r5, r1
 710:	f8 01       	movw	r30, r16
 712:	a0 80       	ld	r10, Z
 714:	b1 80       	ldd	r11, Z+1	; 0x01
 716:	36 fe       	sbrs	r3, 6
 718:	03 c0       	rjmp	.+6      	; 0x720 <vfprintf+0x174>
 71a:	69 2d       	mov	r22, r9
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0x178>
 720:	6f ef       	ldi	r22, 0xFF	; 255
 722:	7f ef       	ldi	r23, 0xFF	; 255
 724:	c5 01       	movw	r24, r10
 726:	0e 94 b7 04 	call	0x96e	; 0x96e <strnlen_P>
 72a:	4c 01       	movw	r8, r24
 72c:	f3 2d       	mov	r31, r3
 72e:	f0 68       	ori	r31, 0x80	; 128
 730:	3f 2e       	mov	r3, r31
 732:	82 01       	movw	r16, r4
 734:	33 fc       	sbrc	r3, 3
 736:	1b c0       	rjmp	.+54     	; 0x76e <vfprintf+0x1c2>
 738:	82 2d       	mov	r24, r2
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	88 16       	cp	r8, r24
 73e:	99 06       	cpc	r9, r25
 740:	b0 f4       	brcc	.+44     	; 0x76e <vfprintf+0x1c2>
 742:	b6 01       	movw	r22, r12
 744:	80 e2       	ldi	r24, 0x20	; 32
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 74c:	2a 94       	dec	r2
 74e:	f4 cf       	rjmp	.-24     	; 0x738 <vfprintf+0x18c>
 750:	f5 01       	movw	r30, r10
 752:	37 fc       	sbrc	r3, 7
 754:	85 91       	lpm	r24, Z+
 756:	37 fe       	sbrs	r3, 7
 758:	81 91       	ld	r24, Z+
 75a:	5f 01       	movw	r10, r30
 75c:	b6 01       	movw	r22, r12
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 764:	21 10       	cpse	r2, r1
 766:	2a 94       	dec	r2
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	82 1a       	sub	r8, r18
 76c:	91 08       	sbc	r9, r1
 76e:	81 14       	cp	r8, r1
 770:	91 04       	cpc	r9, r1
 772:	71 f7       	brne	.-36     	; 0x750 <vfprintf+0x1a4>
 774:	e8 c0       	rjmp	.+464    	; 0x946 <__stack+0x47>
 776:	84 36       	cpi	r24, 0x64	; 100
 778:	11 f0       	breq	.+4      	; 0x77e <vfprintf+0x1d2>
 77a:	89 36       	cpi	r24, 0x69	; 105
 77c:	41 f5       	brne	.+80     	; 0x7ce <vfprintf+0x222>
 77e:	f8 01       	movw	r30, r16
 780:	37 fe       	sbrs	r3, 7
 782:	07 c0       	rjmp	.+14     	; 0x792 <vfprintf+0x1e6>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	82 81       	ldd	r24, Z+2	; 0x02
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	0c 5f       	subi	r16, 0xFC	; 252
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <vfprintf+0x1f6>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	07 2e       	mov	r0, r23
 798:	00 0c       	add	r0, r0
 79a:	88 0b       	sbc	r24, r24
 79c:	99 0b       	sbc	r25, r25
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	f3 2d       	mov	r31, r3
 7a4:	ff 76       	andi	r31, 0x6F	; 111
 7a6:	3f 2e       	mov	r3, r31
 7a8:	97 ff       	sbrs	r25, 7
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x212>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	f0 68       	ori	r31, 0x80	; 128
 7bc:	3f 2e       	mov	r3, r31
 7be:	2a e0       	ldi	r18, 0x0A	; 10
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	a3 01       	movw	r20, r6
 7c4:	0e 94 09 05 	call	0xa12	; 0xa12 <__ultoa_invert>
 7c8:	88 2e       	mov	r8, r24
 7ca:	86 18       	sub	r8, r6
 7cc:	45 c0       	rjmp	.+138    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 7ce:	85 37       	cpi	r24, 0x75	; 117
 7d0:	31 f4       	brne	.+12     	; 0x7de <vfprintf+0x232>
 7d2:	23 2d       	mov	r18, r3
 7d4:	2f 7e       	andi	r18, 0xEF	; 239
 7d6:	b2 2e       	mov	r11, r18
 7d8:	2a e0       	ldi	r18, 0x0A	; 10
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	25 c0       	rjmp	.+74     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7de:	93 2d       	mov	r25, r3
 7e0:	99 7f       	andi	r25, 0xF9	; 249
 7e2:	b9 2e       	mov	r11, r25
 7e4:	8f 36       	cpi	r24, 0x6F	; 111
 7e6:	c1 f0       	breq	.+48     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e8:	18 f4       	brcc	.+6      	; 0x7f0 <vfprintf+0x244>
 7ea:	88 35       	cpi	r24, 0x58	; 88
 7ec:	79 f0       	breq	.+30     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7ee:	b5 c0       	rjmp	.+362    	; 0x95a <__stack+0x5b>
 7f0:	80 37       	cpi	r24, 0x70	; 112
 7f2:	19 f0       	breq	.+6      	; 0x7fa <vfprintf+0x24e>
 7f4:	88 37       	cpi	r24, 0x78	; 120
 7f6:	21 f0       	breq	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
 7f8:	b0 c0       	rjmp	.+352    	; 0x95a <__stack+0x5b>
 7fa:	e9 2f       	mov	r30, r25
 7fc:	e0 61       	ori	r30, 0x10	; 16
 7fe:	be 2e       	mov	r11, r30
 800:	b4 fe       	sbrs	r11, 4
 802:	0d c0       	rjmp	.+26     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 804:	fb 2d       	mov	r31, r11
 806:	f4 60       	ori	r31, 0x04	; 4
 808:	bf 2e       	mov	r11, r31
 80a:	09 c0       	rjmp	.+18     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 80c:	34 fe       	sbrs	r3, 4
 80e:	0a c0       	rjmp	.+20     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 810:	29 2f       	mov	r18, r25
 812:	26 60       	ori	r18, 0x06	; 6
 814:	b2 2e       	mov	r11, r18
 816:	06 c0       	rjmp	.+12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 818:	28 e0       	ldi	r18, 0x08	; 8
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	05 c0       	rjmp	.+10     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 81e:	20 e1       	ldi	r18, 0x10	; 16
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	20 e1       	ldi	r18, 0x10	; 16
 826:	32 e0       	ldi	r19, 0x02	; 2
 828:	f8 01       	movw	r30, r16
 82a:	b7 fe       	sbrs	r11, 7
 82c:	07 c0       	rjmp	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82e:	60 81       	ld	r22, Z
 830:	71 81       	ldd	r23, Z+1	; 0x01
 832:	82 81       	ldd	r24, Z+2	; 0x02
 834:	93 81       	ldd	r25, Z+3	; 0x03
 836:	0c 5f       	subi	r16, 0xFC	; 252
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	06 c0       	rjmp	.+12     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 5f       	subi	r16, 0xFE	; 254
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	a3 01       	movw	r20, r6
 84a:	0e 94 09 05 	call	0xa12	; 0xa12 <__ultoa_invert>
 84e:	88 2e       	mov	r8, r24
 850:	86 18       	sub	r8, r6
 852:	fb 2d       	mov	r31, r11
 854:	ff 77       	andi	r31, 0x7F	; 127
 856:	3f 2e       	mov	r3, r31
 858:	36 fe       	sbrs	r3, 6
 85a:	0d c0       	rjmp	.+26     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 85c:	23 2d       	mov	r18, r3
 85e:	2e 7f       	andi	r18, 0xFE	; 254
 860:	a2 2e       	mov	r10, r18
 862:	89 14       	cp	r8, r9
 864:	58 f4       	brcc	.+22     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 866:	34 fe       	sbrs	r3, 4
 868:	0b c0       	rjmp	.+22     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 86a:	32 fc       	sbrc	r3, 2
 86c:	09 c0       	rjmp	.+18     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 86e:	83 2d       	mov	r24, r3
 870:	8e 7e       	andi	r24, 0xEE	; 238
 872:	a8 2e       	mov	r10, r24
 874:	05 c0       	rjmp	.+10     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 876:	b8 2c       	mov	r11, r8
 878:	a3 2c       	mov	r10, r3
 87a:	03 c0       	rjmp	.+6      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 87c:	b8 2c       	mov	r11, r8
 87e:	01 c0       	rjmp	.+2      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 880:	b9 2c       	mov	r11, r9
 882:	a4 fe       	sbrs	r10, 4
 884:	0f c0       	rjmp	.+30     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 886:	fe 01       	movw	r30, r28
 888:	e8 0d       	add	r30, r8
 88a:	f1 1d       	adc	r31, r1
 88c:	80 81       	ld	r24, Z
 88e:	80 33       	cpi	r24, 0x30	; 48
 890:	21 f4       	brne	.+8      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 892:	9a 2d       	mov	r25, r10
 894:	99 7e       	andi	r25, 0xE9	; 233
 896:	a9 2e       	mov	r10, r25
 898:	09 c0       	rjmp	.+18     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 89a:	a2 fe       	sbrs	r10, 2
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 89e:	b3 94       	inc	r11
 8a0:	b3 94       	inc	r11
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a4:	8a 2d       	mov	r24, r10
 8a6:	86 78       	andi	r24, 0x86	; 134
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8aa:	b3 94       	inc	r11
 8ac:	a3 fc       	sbrc	r10, 3
 8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8b0:	a0 fe       	sbrs	r10, 0
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8b4:	b2 14       	cp	r11, r2
 8b6:	88 f4       	brcc	.+34     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8b8:	28 0c       	add	r2, r8
 8ba:	92 2c       	mov	r9, r2
 8bc:	9b 18       	sub	r9, r11
 8be:	0e c0       	rjmp	.+28     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8c0:	b2 14       	cp	r11, r2
 8c2:	60 f4       	brcc	.+24     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8c4:	b6 01       	movw	r22, r12
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 8ce:	b3 94       	inc	r11
 8d0:	f7 cf       	rjmp	.-18     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8d2:	b2 14       	cp	r11, r2
 8d4:	18 f4       	brcc	.+6      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d6:	2b 18       	sub	r2, r11
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8da:	98 2c       	mov	r9, r8
 8dc:	21 2c       	mov	r2, r1
 8de:	a4 fe       	sbrs	r10, 4
 8e0:	10 c0       	rjmp	.+32     	; 0x902 <__stack+0x3>
 8e2:	b6 01       	movw	r22, r12
 8e4:	80 e3       	ldi	r24, 0x30	; 48
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 8ec:	a2 fe       	sbrs	r10, 2
 8ee:	17 c0       	rjmp	.+46     	; 0x91e <__stack+0x1f>
 8f0:	a1 fc       	sbrc	r10, 1
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f4:	88 e7       	ldi	r24, 0x78	; 120
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8fa:	88 e5       	ldi	r24, 0x58	; 88
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	b6 01       	movw	r22, r12
 900:	0c c0       	rjmp	.+24     	; 0x91a <__stack+0x1b>
 902:	8a 2d       	mov	r24, r10
 904:	86 78       	andi	r24, 0x86	; 134
 906:	59 f0       	breq	.+22     	; 0x91e <__stack+0x1f>
 908:	a1 fe       	sbrs	r10, 1
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
 90c:	8b e2       	ldi	r24, 0x2B	; 43
 90e:	01 c0       	rjmp	.+2      	; 0x912 <__stack+0x13>
 910:	80 e2       	ldi	r24, 0x20	; 32
 912:	a7 fc       	sbrc	r10, 7
 914:	8d e2       	ldi	r24, 0x2D	; 45
 916:	b6 01       	movw	r22, r12
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 91e:	89 14       	cp	r8, r9
 920:	38 f4       	brcc	.+14     	; 0x930 <__stack+0x31>
 922:	b6 01       	movw	r22, r12
 924:	80 e3       	ldi	r24, 0x30	; 48
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 92c:	9a 94       	dec	r9
 92e:	f7 cf       	rjmp	.-18     	; 0x91e <__stack+0x1f>
 930:	8a 94       	dec	r8
 932:	f3 01       	movw	r30, r6
 934:	e8 0d       	add	r30, r8
 936:	f1 1d       	adc	r31, r1
 938:	80 81       	ld	r24, Z
 93a:	b6 01       	movw	r22, r12
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 942:	81 10       	cpse	r8, r1
 944:	f5 cf       	rjmp	.-22     	; 0x930 <__stack+0x31>
 946:	22 20       	and	r2, r2
 948:	09 f4       	brne	.+2      	; 0x94c <__stack+0x4d>
 94a:	42 ce       	rjmp	.-892    	; 0x5d0 <vfprintf+0x24>
 94c:	b6 01       	movw	r22, r12
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 cd 04 	call	0x99a	; 0x99a <fputc>
 956:	2a 94       	dec	r2
 958:	f6 cf       	rjmp	.-20     	; 0x946 <__stack+0x47>
 95a:	f6 01       	movw	r30, r12
 95c:	86 81       	ldd	r24, Z+6	; 0x06
 95e:	97 81       	ldd	r25, Z+7	; 0x07
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	9f ef       	ldi	r25, 0xFF	; 255
 966:	2b 96       	adiw	r28, 0x0b	; 11
 968:	e2 e1       	ldi	r30, 0x12	; 18
 96a:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__epilogue_restores__>

0000096e <strnlen_P>:
 96e:	fc 01       	movw	r30, r24
 970:	05 90       	lpm	r0, Z+
 972:	61 50       	subi	r22, 0x01	; 1
 974:	70 40       	sbci	r23, 0x00	; 0
 976:	01 10       	cpse	r0, r1
 978:	d8 f7       	brcc	.-10     	; 0x970 <strnlen_P+0x2>
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	8e 0f       	add	r24, r30
 980:	9f 1f       	adc	r25, r31
 982:	08 95       	ret

00000984 <strnlen>:
 984:	fc 01       	movw	r30, r24
 986:	61 50       	subi	r22, 0x01	; 1
 988:	70 40       	sbci	r23, 0x00	; 0
 98a:	01 90       	ld	r0, Z+
 98c:	01 10       	cpse	r0, r1
 98e:	d8 f7       	brcc	.-10     	; 0x986 <strnlen+0x2>
 990:	80 95       	com	r24
 992:	90 95       	com	r25
 994:	8e 0f       	add	r24, r30
 996:	9f 1f       	adc	r25, r31
 998:	08 95       	ret

0000099a <fputc>:
 99a:	0f 93       	push	r16
 99c:	1f 93       	push	r17
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	fb 01       	movw	r30, r22
 9a4:	23 81       	ldd	r18, Z+3	; 0x03
 9a6:	21 fd       	sbrc	r18, 1
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <fputc+0x16>
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	9f ef       	ldi	r25, 0xFF	; 255
 9ae:	2c c0       	rjmp	.+88     	; 0xa08 <fputc+0x6e>
 9b0:	22 ff       	sbrs	r18, 2
 9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <fputc+0x46>
 9b4:	46 81       	ldd	r20, Z+6	; 0x06
 9b6:	57 81       	ldd	r21, Z+7	; 0x07
 9b8:	24 81       	ldd	r18, Z+4	; 0x04
 9ba:	35 81       	ldd	r19, Z+5	; 0x05
 9bc:	42 17       	cp	r20, r18
 9be:	53 07       	cpc	r21, r19
 9c0:	44 f4       	brge	.+16     	; 0x9d2 <fputc+0x38>
 9c2:	a0 81       	ld	r26, Z
 9c4:	b1 81       	ldd	r27, Z+1	; 0x01
 9c6:	9d 01       	movw	r18, r26
 9c8:	2f 5f       	subi	r18, 0xFF	; 255
 9ca:	3f 4f       	sbci	r19, 0xFF	; 255
 9cc:	31 83       	std	Z+1, r19	; 0x01
 9ce:	20 83       	st	Z, r18
 9d0:	8c 93       	st	X, r24
 9d2:	26 81       	ldd	r18, Z+6	; 0x06
 9d4:	37 81       	ldd	r19, Z+7	; 0x07
 9d6:	2f 5f       	subi	r18, 0xFF	; 255
 9d8:	3f 4f       	sbci	r19, 0xFF	; 255
 9da:	37 83       	std	Z+7, r19	; 0x07
 9dc:	26 83       	std	Z+6, r18	; 0x06
 9de:	14 c0       	rjmp	.+40     	; 0xa08 <fputc+0x6e>
 9e0:	8b 01       	movw	r16, r22
 9e2:	ec 01       	movw	r28, r24
 9e4:	fb 01       	movw	r30, r22
 9e6:	00 84       	ldd	r0, Z+8	; 0x08
 9e8:	f1 85       	ldd	r31, Z+9	; 0x09
 9ea:	e0 2d       	mov	r30, r0
 9ec:	09 95       	icall
 9ee:	89 2b       	or	r24, r25
 9f0:	e1 f6       	brne	.-72     	; 0x9aa <fputc+0x10>
 9f2:	d8 01       	movw	r26, r16
 9f4:	16 96       	adiw	r26, 0x06	; 6
 9f6:	8d 91       	ld	r24, X+
 9f8:	9c 91       	ld	r25, X
 9fa:	17 97       	sbiw	r26, 0x07	; 7
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	17 96       	adiw	r26, 0x07	; 7
 a00:	9c 93       	st	X, r25
 a02:	8e 93       	st	-X, r24
 a04:	16 97       	sbiw	r26, 0x06	; 6
 a06:	ce 01       	movw	r24, r28
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	1f 91       	pop	r17
 a0e:	0f 91       	pop	r16
 a10:	08 95       	ret

00000a12 <__ultoa_invert>:
 a12:	fa 01       	movw	r30, r20
 a14:	aa 27       	eor	r26, r26
 a16:	28 30       	cpi	r18, 0x08	; 8
 a18:	51 f1       	breq	.+84     	; 0xa6e <__ultoa_invert+0x5c>
 a1a:	20 31       	cpi	r18, 0x10	; 16
 a1c:	81 f1       	breq	.+96     	; 0xa7e <__ultoa_invert+0x6c>
 a1e:	e8 94       	clt
 a20:	6f 93       	push	r22
 a22:	6e 7f       	andi	r22, 0xFE	; 254
 a24:	6e 5f       	subi	r22, 0xFE	; 254
 a26:	7f 4f       	sbci	r23, 0xFF	; 255
 a28:	8f 4f       	sbci	r24, 0xFF	; 255
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	af 4f       	sbci	r26, 0xFF	; 255
 a2e:	b1 e0       	ldi	r27, 0x01	; 1
 a30:	3e d0       	rcall	.+124    	; 0xaae <__ultoa_invert+0x9c>
 a32:	b4 e0       	ldi	r27, 0x04	; 4
 a34:	3c d0       	rcall	.+120    	; 0xaae <__ultoa_invert+0x9c>
 a36:	67 0f       	add	r22, r23
 a38:	78 1f       	adc	r23, r24
 a3a:	89 1f       	adc	r24, r25
 a3c:	9a 1f       	adc	r25, r26
 a3e:	a1 1d       	adc	r26, r1
 a40:	68 0f       	add	r22, r24
 a42:	79 1f       	adc	r23, r25
 a44:	8a 1f       	adc	r24, r26
 a46:	91 1d       	adc	r25, r1
 a48:	a1 1d       	adc	r26, r1
 a4a:	6a 0f       	add	r22, r26
 a4c:	71 1d       	adc	r23, r1
 a4e:	81 1d       	adc	r24, r1
 a50:	91 1d       	adc	r25, r1
 a52:	a1 1d       	adc	r26, r1
 a54:	20 d0       	rcall	.+64     	; 0xa96 <__ultoa_invert+0x84>
 a56:	09 f4       	brne	.+2      	; 0xa5a <__ultoa_invert+0x48>
 a58:	68 94       	set
 a5a:	3f 91       	pop	r19
 a5c:	2a e0       	ldi	r18, 0x0A	; 10
 a5e:	26 9f       	mul	r18, r22
 a60:	11 24       	eor	r1, r1
 a62:	30 19       	sub	r19, r0
 a64:	30 5d       	subi	r19, 0xD0	; 208
 a66:	31 93       	st	Z+, r19
 a68:	de f6       	brtc	.-74     	; 0xa20 <__ultoa_invert+0xe>
 a6a:	cf 01       	movw	r24, r30
 a6c:	08 95       	ret
 a6e:	46 2f       	mov	r20, r22
 a70:	47 70       	andi	r20, 0x07	; 7
 a72:	40 5d       	subi	r20, 0xD0	; 208
 a74:	41 93       	st	Z+, r20
 a76:	b3 e0       	ldi	r27, 0x03	; 3
 a78:	0f d0       	rcall	.+30     	; 0xa98 <__ultoa_invert+0x86>
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__ultoa_invert+0x5c>
 a7c:	f6 cf       	rjmp	.-20     	; 0xa6a <__ultoa_invert+0x58>
 a7e:	46 2f       	mov	r20, r22
 a80:	4f 70       	andi	r20, 0x0F	; 15
 a82:	40 5d       	subi	r20, 0xD0	; 208
 a84:	4a 33       	cpi	r20, 0x3A	; 58
 a86:	18 f0       	brcs	.+6      	; 0xa8e <__ultoa_invert+0x7c>
 a88:	49 5d       	subi	r20, 0xD9	; 217
 a8a:	31 fd       	sbrc	r19, 1
 a8c:	40 52       	subi	r20, 0x20	; 32
 a8e:	41 93       	st	Z+, r20
 a90:	02 d0       	rcall	.+4      	; 0xa96 <__ultoa_invert+0x84>
 a92:	a9 f7       	brne	.-22     	; 0xa7e <__ultoa_invert+0x6c>
 a94:	ea cf       	rjmp	.-44     	; 0xa6a <__ultoa_invert+0x58>
 a96:	b4 e0       	ldi	r27, 0x04	; 4
 a98:	a6 95       	lsr	r26
 a9a:	97 95       	ror	r25
 a9c:	87 95       	ror	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	ba 95       	dec	r27
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__ultoa_invert+0x86>
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	61 05       	cpc	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	08 95       	ret
 aae:	9b 01       	movw	r18, r22
 ab0:	ac 01       	movw	r20, r24
 ab2:	0a 2e       	mov	r0, r26
 ab4:	06 94       	lsr	r0
 ab6:	57 95       	ror	r21
 ab8:	47 95       	ror	r20
 aba:	37 95       	ror	r19
 abc:	27 95       	ror	r18
 abe:	ba 95       	dec	r27
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__ultoa_invert+0xa2>
 ac2:	62 0f       	add	r22, r18
 ac4:	73 1f       	adc	r23, r19
 ac6:	84 1f       	adc	r24, r20
 ac8:	95 1f       	adc	r25, r21
 aca:	a0 1d       	adc	r26, r0
 acc:	08 95       	ret

00000ace <__prologue_saves__>:
 ace:	2f 92       	push	r2
 ad0:	3f 92       	push	r3
 ad2:	4f 92       	push	r4
 ad4:	5f 92       	push	r5
 ad6:	6f 92       	push	r6
 ad8:	7f 92       	push	r7
 ada:	8f 92       	push	r8
 adc:	9f 92       	push	r9
 ade:	af 92       	push	r10
 ae0:	bf 92       	push	r11
 ae2:	cf 92       	push	r12
 ae4:	df 92       	push	r13
 ae6:	ef 92       	push	r14
 ae8:	ff 92       	push	r15
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
 af6:	ca 1b       	sub	r28, r26
 af8:	db 0b       	sbc	r29, r27
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	f8 94       	cli
 afe:	de bf       	out	0x3e, r29	; 62
 b00:	0f be       	out	0x3f, r0	; 63
 b02:	cd bf       	out	0x3d, r28	; 61
 b04:	09 94       	ijmp

00000b06 <__epilogue_restores__>:
 b06:	2a 88       	ldd	r2, Y+18	; 0x12
 b08:	39 88       	ldd	r3, Y+17	; 0x11
 b0a:	48 88       	ldd	r4, Y+16	; 0x10
 b0c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b0e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b10:	7d 84       	ldd	r7, Y+13	; 0x0d
 b12:	8c 84       	ldd	r8, Y+12	; 0x0c
 b14:	9b 84       	ldd	r9, Y+11	; 0x0b
 b16:	aa 84       	ldd	r10, Y+10	; 0x0a
 b18:	b9 84       	ldd	r11, Y+9	; 0x09
 b1a:	c8 84       	ldd	r12, Y+8	; 0x08
 b1c:	df 80       	ldd	r13, Y+7	; 0x07
 b1e:	ee 80       	ldd	r14, Y+6	; 0x06
 b20:	fd 80       	ldd	r15, Y+5	; 0x05
 b22:	0c 81       	ldd	r16, Y+4	; 0x04
 b24:	1b 81       	ldd	r17, Y+3	; 0x03
 b26:	aa 81       	ldd	r26, Y+2	; 0x02
 b28:	b9 81       	ldd	r27, Y+1	; 0x01
 b2a:	ce 0f       	add	r28, r30
 b2c:	d1 1d       	adc	r29, r1
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	ed 01       	movw	r28, r26
 b3a:	08 95       	ret

00000b3c <_exit>:
 b3c:	f8 94       	cli

00000b3e <__stop_program>:
 b3e:	ff cf       	rjmp	.-2      	; 0xb3e <__stop_program>
