
PreLab4.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800120  00800120  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000884  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c1  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
}

void init_ports(void) {
	// Configuración de pines de entrada y salida
	// Pines PC0-PC3 como salida para los LEDs
	DDRC |= 0x0F;
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	87 b9       	out	0x07, r24	; 7
	// Pines PC4 y PC5 como entrada para los botones
	DDRC &= ~(1 << PC4) & ~(1 << PC5);
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	8f 7c       	andi	r24, 0xCF	; 207
  b0:	87 b9       	out	0x07, r24	; 7
	// Pines PB0-PB3 como salida para los LEDs
	DDRB |= 0xF;
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	84 b9       	out	0x04, r24	; 4
	
	// Puerto D como salida
	DDRD = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  bc:	1b b8       	out	0x0b, r1	; 11
	// Utilizar Rx y Tx
	UCSR0B = 0;
  be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Pines PB4 y PB5 como salida para transistores
	DDRB |= (1 << PB4) | (1 << PB5);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 63       	ori	r24, 0x30	; 48
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	08 95       	ret

000000ca <initADC>:
}

void initADC(void){
	ADMUX = 0;
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	
	// Vref = 5V
	ADMUX |= (1<<REFS0);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //Justificando IZQ
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  e2:	aa e7       	ldi	r26, 0x7A	; 122
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	1c 92       	st	X, r1
	ADCSRA |= (1<<ADEN); //Enciende ADC
  e8:	8c 91       	ld	r24, X
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADIE); //ISR ADC
  ee:	8c 91       	ld	r24, X
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	8c 93       	st	X, r24
	
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //PrescaleR 128 > 16M/128 = 125kHz
  f4:	8c 91       	ld	r24, X
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	8c 93       	st	X, r24
	
	ADMUX |= (1<<MUX1) | (1<<MUX2); //canal 6
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <__vector_21>:
}

ISR(ADC_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	ValorADC =  ADCH;
 118:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <ValorADC>
	Dec = (ValorADC >> 4) & 0x0F;
 120:	28 2f       	mov	r18, r24
 122:	22 95       	swap	r18
 124:	2f 70       	andi	r18, 0x0F	; 15
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <Dec+0x1>
 12c:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <Dec>
	Uni = ValorADC & 0x0F;
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <Uni+0x1>
 138:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Uni>
	ADCSRA |= (1<<ADIF);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 61       	ori	r24, 0x10	; 16
 144:	80 83       	st	Z, r24
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <Salidas>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <Salidas+0x4>
 164:	00 c0       	rjmp	.+0      	; 0x166 <Salidas+0xa>
 166:	00 00       	nop

void Salidas(void){
	//Mostrar valor unidades (1erDisplay)
	_delay_ms(10);
	PORTD = seg7[Uni];
 168:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <Uni>
 16c:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <Uni+0x1>
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1<<PB5);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PB4);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 61       	ori	r24, 0x10	; 16
 186:	85 b9       	out	0x05, r24	; 5
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9c e9       	ldi	r25, 0x9C	; 156
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <Salidas+0x30>
 190:	00 c0       	rjmp	.+0      	; 0x192 <Salidas+0x36>
 192:	00 00       	nop
	_delay_ms(10);
	//Mostrar valor decenas (2ndoDisplay)
	PORTD = seg7[Dec];
 194:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <Dec>
 198:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <Dec+0x1>
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e0 50       	subi	r30, 0x00	; 0
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	80 81       	ld	r24, Z
 1a6:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~(1<<PB4);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PB5);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Salidas+0x5c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Salidas+0x62>
 1be:	00 00       	nop
	_delay_ms(5);
	// Mostrar el valor del contador en los LEDs
	PORTB = contador & 0x0F; // Los 4 bits menos significativos en PB0-PB3
 1c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	85 b9       	out	0x05, r24	; 5
	PORTC = (contador >> 4) & 0x0F; // Los 4 bits más significativos en PC0-PC3
 1c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1cc:	82 95       	swap	r24
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	08 95       	ret

000001d4 <main>:
uint8_t ValorADC;
uint8_t contador = 0;
const int seg7[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};

int main(void) {
	cli();
 1d4:	f8 94       	cli
	init_ports();
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	initADC();
 1da:	0e 94 65 00 	call	0xca	; 0xca <initADC>
	sei();
 1de:	78 94       	sei

	uint8_t boton_estado_PC4 = 1; // Estado anterior del botón PC4
	uint8_t boton_estado_PC5 = 1; // Estado anterior del botón PC5
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
	cli();
	init_ports();
	initADC();
	sei();

	uint8_t boton_estado_PC4 = 1; // Estado anterior del botón PC4
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
	uint8_t boton_estado_PC5 = 1; // Estado anterior del botón PC5

	while (1) {
			
		// Incrementar contador si el botón PC4 se presiona y se libera
		if (!(PINC & (1 << PC4)) && boton_estado_PC4) {
 1e4:	34 99       	sbic	0x06, 4	; 6
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <main+0x24>
 1e8:	cc 23       	and	r28, r28
 1ea:	31 f0       	breq	.+12     	; 0x1f8 <main+0x24>
			contador--;
 1ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if (contador > 255) {
				contador = 0;
			}
			boton_estado_PC4 = 0; // Marcar que el botón PC4 está presionado
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
		}
		// Actualizar el estado anterior del botón PC4
		if (PINC & (1 << PC4)) {
 1f8:	34 99       	sbic	0x06, 4	; 6
			boton_estado_PC4 = 1;
 1fa:	c1 e0       	ldi	r28, 0x01	; 1
		}

		// Decrementar contador si el botón PC5 se presiona y se libera
		if (!(PINC & (1 << PC5)) && boton_estado_PC5) {
 1fc:	35 99       	sbic	0x06, 5	; 6
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <main+0x3c>
 200:	dd 23       	and	r29, r29
 202:	31 f0       	breq	.+12     	; 0x210 <main+0x3c>
			contador++;
 204:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
			if (contador < 0) {
				contador = 255;
			}
			boton_estado_PC5 = 0; // Marcar que el botón PC5 está presionado
 20e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		// Actualizar el estado anterior del botón PC5
		if (PINC & (1 << PC5)) {
 210:	35 99       	sbic	0x06, 5	; 6
			boton_estado_PC5 = 1;
 212:	d1 e0       	ldi	r29, 0x01	; 1
		}

		ADCSRA |= (1<<ADSC); //Habilita conv
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
		
		Salidas();
 21e:	0e 94 ae 00 	call	0x15c	; 0x15c <Salidas>
		
		if (contador == ValorADC)
 222:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 226:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <ValorADC>
 22a:	98 13       	cpse	r25, r24
 22c:	04 c0       	rjmp	.+8      	; 0x236 <main+0x62>
		{
			PORTD |= (1<<PD7);
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8b b9       	out	0x0b, r24	; 11
 234:	d7 cf       	rjmp	.-82     	; 0x1e4 <main+0x10>
		} 
		else
		{
			PORTD &= ~(1<<PD7);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	8f 77       	andi	r24, 0x7F	; 127
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	d3 cf       	rjmp	.-90     	; 0x1e4 <main+0x10>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
